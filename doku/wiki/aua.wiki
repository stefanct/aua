'''Another Useless Architecture''' ('''AUA''') is a [[w:Reduced Instruction Set Computing|RISC]] [[w:Microprocessor|microprocessor]] architecture
developed by Jakob Wilhelm, Stefan Rottensteiner and Stefan Tauner as a course project for the [[Computer Architecture Lab]]
at the [[w:Vienna_University_of_Technology|Vienna University of Technology]] in winter 2008/2009.
It was implemented in [[w:VHDL|VHDL]] and tested in a Cyclone II [[w:FPGA|FPGA]] from [[w:Altera|Altera]] on a DE2 development board from Terasic Technology.

= Description =
AUA is a 16bit RISC architecture with 32 Registers that can't hide its similarities to MIPS.
Like MIPS branches are supported by individual compare and branch instructions (e.g. you have
to compare two values/registers and use the result as input for the branch decision).
The branch delay is 0 for untaken and 1 cycle for taken branches. The branch decision and branch
address calculation is done in the ID stage. An additional cycle is lost, if the branch uses
the result of the instruction directly before it. It is not possible to circumvent this stall
with forwarding or it would introduce a new longest path (from the ID/EX pipeline registers,
through the alu, through the branch decision unit in ID, to the PC register in IF).
The EX stage forwards its results to resolve data hazards in all other instruction sequences though
(e.g. if instruction <math>n+1</math> uses the (EX) result of instruction <math>n</math> as (EX) input).
We used on-chip memory of the FPGA (M4K blocks) for the register file.
Because the memory requires registered inputs,
this registers can be thought as the pipeline registers for the WB stage.
To be able to read two registers (the two operands) and write one (the result of the previous instruction),
we had to duplicate the register file into two "simple dual-port mode" memories.
Another possibility would be to clock the memory twice as fast, but we did prefer a single clock domain.
In dual-port mode the on-chip memory has a latency of 1.5 cycles, which
made another forwarding necessary if instr. <math>n+2</math> uses the result of instr. <math>n</math>.
Beside the branch stall, where IF and (partially) ID get locked, the EX stage needs to lock
all stages, when a load/store operation takes more than one cycle.

[[Image:AUA-Pipeline.png|thumb|right|link=AUA-Pipeline.png|[[Media:AUA-Pipeline.png|Schematic]] of the AUA pipeline]]

== Memory and I/O ==
Instructions, data and memory-mapped I/O devices all share the same address space.
The MMU is responsible for handling all memory transactions and transfers the data
to the instruction cache and from/to the load/store unit in the EX stage.
LD/ST transactions have priority over instruction fetches, so that the pipeline can
progress normally. IF will schedule a nop, if it is blocked because the current instr.
is not available.
The MMU can access on-board SRAM, on-chip ROM (e.g. for a bootloader) and an unlimited
number of SimpCon devices. <fixme mag der sack was hinzufuegen?>

== Pipeline stages ==
AUA has three stages (four if you include write-back): IF, ID, EX/MEM.
IF requests the instruction at the current address/PC from the cache/MMU and extracts
the various fields (opcode, immediate, operand and destinstation register addresses).
These fields get registered and feed into ID.

The immediate field gets expanded ''and'' sign extended before
a logic block controls a mux according to the current opcode to choose the correct
form of immediate or drop it altogether in favor of a value read from the register file.
ID also decides, if a branch is taken and if so, which address is next to be fetched
by IF. It is not possible to read the PC directly, but to support returning from functions,
ID can store the PC into a register by scheduling an ordinary MOV and overriding the source
operand with the current PC value.

EX contains the ALU and a small control curcuit to process LD/ST instructions in cooperation
with the MMU. The result of either the ALU or the MMU is selected and transfered to the register
file (through the ID unit). If the destination is the zero register, EX enforces a value of
0 to not alter the register.

= Instruction Set Architecture =
The ISA of AUA is typical for a RISC. It was designed with the decoding in mind:
All types of fields (opcode, immediates etc.) have a fixed location in the fixed-sized instruction word of 16b.
One attribute of our architecture particularly constrained the design of the ISA: We
decided that we want 32 registers. This means that out of the 16 bits of one instruction word,
5 bits are needed to address a register.

Most commands need two input registers and one destination register. We use ''2 address encoding'',
where one source register is used as the destination too. This leaves us with at most 6 bits for the opcode,
or a maximum of 64 instructions. This number gets reduced by the ''ldi'' instruction, because 8b are needed
for the immediate itself plus 5b for the destination register, leaving 3b for the ''ldi'' opcode. Or in other words
<math>6-3b</math> are wasted for a part of the immediate value. These 3 bits can't be used for other instructions.
Since we could not think of 56 useful instructions anyway, we introduced another type of instruction, that uses immediates.
These use 7 bits to encode the immediate, wasting 2b of opcode space each.
So the total number of instructions is limited to <math>2^6 - (2^3-1) - 4*(2^2-1) = 45</math>.

<!--  \subsection{Addressing modes}
% \subsection{Special instructions} -->

== Instructions ==
The following table lists all instructions currently implemented in hardware (see the [[#Pseudo_Instructions|pseudo instruction section]] below for the rest).
There are still some white spots, which are reserved for later use. Cells filled with a '''s''' form an encoded source register. '''d''', '''i''' likewise
for destination registers and immediates. '''a''' denotes that the memory address (e.g. for a branch) is taken from the register encoded by these cells.
{| class="wikitable" style="text-align:center; border:1px solid; line-height:100%" cellspacing="0"
|+ Table of AUA instructions and their encoding
!Mnemo.
!Imm.
!colspan="6"|
!colspan="5"|OP B
!colspan="5"|OP A
!hex op
!notes
|- style="font-size:70%;background:#f2f2f2;line-height:100%"
|  colspan="2"| ||width=15px|15||width=15px|14||width=15px|13||width=15px|12||width=15px|11||width=15px|10||width=15px|9||width=15px|8||width=15px|7||width=15px|6||width=15px|5||width=15px|4||width=15px|3||width=15px|2||width=15px|1||width=15px|0|| colspan="2"|
|-
| style="text-align: left"| ldi|| unsigned|| 0||0||0||i||i||i||i||i||i||i||i||d||d||d||d||d||style="text-align: right"|0x00-0x07||
|-
| ||||0||0||1||0||0||0||||||||||||||||||||||style="text-align: right"|0x08||
|-
| ||||0||0||1||0||0||1||||||||||||||||||||||style="text-align: right"|0x09||
|-
| ||||0||0||1||0||1||0||||||||||||||||||||||style="text-align: right"|0x0A||
|-
| ||||0||0||1||0||1||1||||||||||||||||||||||style="text-align: right"|0x0B||
|-
| ||||0||0||1||1||0||0||||||||||||||||||||||style="text-align: right"|0x0C||
|-
| style="text-align: left"| jmpl||||0||0||1||1||0||1||a||a||a||a||a||||||||||||style="text-align: right"|0x0D||
|-
| style="text-align: left"| brez||||0||0||1||1||1||0||a||a||a||a||a||s||s||s||s||s||style="text-align: right"|0x0E||
|-
| style="text-align: left"| brnez||||0||0||1||1||1||1||a||a||a||a||a||s||s||s||s||s||style="text-align: right"|0x0F||
|-
| style="text-align: left"| brezi||signed||0||1||0||0||i||i||i||i||i||i||i||s||s||s||s||s||style="text-align: right"|0x10-0x13||
|-
| style="text-align: left"| brnezi||signed||0||1||0||1||i||i||i||i||i||i||i||s||s||s||s||s||style="text-align: right"|0x14-0x17||
|-
| style="text-align: left"| addi||signed||0||1||1||0||i||i||i||i||i||i||i||d||d||d||d||d||style="text-align: right"|0x18-0x1B||carry
|-
| style="text-align: left"| muli||signed||0||1||1||1||i||i||i||i||i||i||i||d||d||d||d||d||style="text-align: right"|0x1C-0x1F||
|-
| style="text-align: left"| add||||1||0||0||0||0||0||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x20|||
|-
| style="text-align: left"| addc||||1||0||0||0||0||1||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x21||carry
|-
| style="text-align: left"| sub||||1||0||0||0||1||0||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x22||carry
|-
| style="text-align: left"| subc||||1||0||0||0||1||1||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x23||carry
|-
| style="text-align: left"| mul||||1||0||0||1||0||0||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x24||
|-
| style="text-align: left"| mulu||||1||0||0||1||0||1||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x25||
|-
| style="text-align: left"| mulh||||1||0||0||1||1||0||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x26||
|-
| style="text-align: left"| mulhu||||1||0||0||1||1||1||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x27||
|-
| style="text-align: left"| or||||1||0||1||0||0||0||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x28||
|-
| style="text-align: left"| and||||1||0||1||0||0||1||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x29||
|-
| style="text-align: left"| xor||||1||0||1||0||1||0||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x2A||
|-
| style="text-align: left"| not||||1||0||1||0||1||1||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x2B||
|-
| style="text-align: left"| neg||||1||0||1||1||0||0||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x2C||
|-
| style="text-align: left"| asr||||1||0||1||1||0||1||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x2D||
|-
| style="text-align: left"| lsl||||1||0||1||1||1||0||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x2E||
|-
| style="text-align: left"| lsr||||1||0||1||1||1||1||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x2F||
|-
| style="text-align: left"| lsli||unsigned||1||1||0||0||0||0||||i||i||i||i||d||d||d||d||d||style="text-align: right"|0x30||
|-
| style="text-align: left"| lsri||unsigned||1||1||0||0||0||1||||i||i||i||i||d||d||d||d||d||style="text-align: right"|0x31||
|-
| style="text-align: left"| scb||unsigned||1||1||0||0||1||0||d||i||i||i||i||d||d||d||d||d||style="text-align: right"|0x32||d=set/!clear
|-
| style="text-align: left"| roti||unsigned||1||1||0||0||1||1||d||i||i||i||i||d||d||d||d||d||style="text-align: right"|0x33||d=left/!left
|-
| style="text-align: left"| ||||1||1||0||1||0||0||||||||||||||||||||||style="text-align: right"|0x34||
|-
| style="text-align: left"| cmplt||||1||1||0||1||0||1||s||s||s||s||s||s||s||s||s||s||style="text-align: right"|0x35||
|-
| style="text-align: left"| cmpltu||||1||1||0||1||1||0||s||s||s||s||s||s||s||s||s||s||style="text-align: right"|0x36||
|-
| style="text-align: left"| cmplte||||1||1||0||1||1||1||s||s||s||s||s||s||s||s||s||s||style="text-align: right"|0x37||
|-
| style="text-align: left"| cmplteu||||1||1||1||0||0||0||s||s||s||s||s||s||s||s||s||s||style="text-align: right"|0x38||
|-
| style="text-align: left"| cmpe||||1||1||1||0||0||1||s||s||s||s||s||s||s||s||s||s||style="text-align: right"|0x39||
|-
| style="text-align: left"| cmpei||unsigned||1||1||1||0||1||0||i||i||i||i||i||d||d||d||d||d||style="text-align: right"|0x3A||
|-
| style="text-align: left"| mov||||1||1||1||0||1||1||s||s||s||s||s||d||d||d||d||d||style="text-align: right"|0x3B||
|-
| style="text-align: left"| ld||||1||1||1||1||0||0||a||a||a||a||a||d||d||d||d||d||style="text-align: right"|0x3C||
|-
| style="text-align: left"| ldb||||1||1||1||1||0||1||a||a||a||a||a||d||d||d||d||d||style="text-align: right"|0x3D||
|-
| style="text-align: left"| st||||1||1||1||1||1||0||a||a||a||a||a||s||s||s||s||s||style="text-align: right"|0x3E||
|- 
| style="text-align: left"| stb||||1||1||1||1||1||1||a||a||a||a||a||s||s||s||s||s||style="text-align: right"|0x3F||
|- style="font-size:70%;background:#f2f2f2;line-height:100%"
|  colspan="2"| ||width=15px|15||width=15px|14||width=15px|13||width=15px|12||width=15px|11||width=15px|10||width=15px|9||width=15px|8||width=15px|7||width=15px|6||width=15px|5||width=15px|4||width=15px|3||width=15px|2||width=15px|1||width=15px|0|| colspan="2"|
|-
! colspan="8"|
! colspan="5"|OP B
! colspan="5"|OP A
! colspan="2"|
|}

rotti stuff...

== Application Binary Interface & Registers ==

= Assembler =
Before we wrote our own assembler, we tried to use an assembler generator that takes an architecture definition
(how many registers; definition and encoding of the instructions etc) and outputs
an assembler, a disassembler, a high level simulator etc.
We tried [http://archc.sourceforge.net/ ArchC], a brazilian project that
patches the GNU binutils according to a your architecture.
Sounds great? Theoretically, yes, but ArchC needs SystemC and both take quite some time to setup, if you don't know exactly what you need to do
(e.g. ArchC requires an closely matched version of the binutil sources, or patching fails).
When we finally got it working, we found some bugs in the generated assembler (e.g. labels were not handled correctly all the time).
We had spent a few hours digging binutils code, when we decided that it's not worth the trouble and started work on our own tools.

paar allg worte... c++, boost

== Pseudo Instructions ==
table + beschreibung

{| class="wikitable" style="text-align:center; border:1px solid; line-height:100%" cellspacing="0" 
|+ Table of pseudo instruction
!Syntax
!mapped command(s)
!notes
|-
|nop||ldi $0, 0<!---<br/>mehrzeilig--->||
|-
|ret||brez $31, $0||$31 must contain <br />the return address
|}

== Syntax ==

== Example program ==


<!--- rotti's latex:
\textbf{ldi - Load Immediate (signed)}

Description:

Load an 8 bit immediate to the register at bit 7 to 0

Immediate is 8 bits long and interpreted as signed

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Imm & LDI \ Rd, Imm &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
0 & 0 & 0 & i & i & i & i & i & i & i & i & d & d & d & d & d \\ \hline
\end{tabular}

\bigskip

jmpl - Jump and Link

Description:

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
PC $\longleftarrow $ Addr & JMPL \ \ Addr &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{x}
& \multicolumn{1}{|l|}{x} & \multicolumn{1}{|l|}{x} & \multicolumn{1}{|l|}{x}
& \multicolumn{1}{|l|}{x} \\ \hline
\end{tabular}

\bigskip

brez - Branch if Equal Zero

Description:

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
&  &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} \\ \hline
\end{tabular}

\bigskip

brnez - Branch if Not Equal Zero

Description:

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
&  &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} \\ \hline
\end{tabular}

\bigskip

brezi - Branch if Equal Zero with Immediate

Description:

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
&  &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} \\ \hline
\end{tabular}

\bigskip

brnezi - Branch if Not Equal Zero with Immediate

Description:

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
&  &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} \\ \hline
\end{tabular}

\bigskip

\textbf{addi - Add Immediate}

Description:

Add an immediate to Rd and write the result back to Rd.

Immediate is 7 bit long and interpreted as signed.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd + Imm & ADDI \ \ Rd, Imm &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{muli - Multiply Immediate}

Description:

Multiply an immediate with Rd and write the result back to Rd

Immediate is 7 bit long and interpreted as signed.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd x Imm & MULI \ \ Rd, Imm &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{add - Add without carry}

Description:

Add two registers and write the result back to Rd

Carrybit is set, if an overflow occurrd

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd + Rs & ADD \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{addc - Add with Carry}

Description:

Add two registers and the Carrybit and write the result back to Rd

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd + Rs + C & ADDC \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{sub - Sub without carry}

Description:

Subtract two registers.and write the result back to Rd.

Carrybit is set, if an Underrun occurrd.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd - Rs & SUB \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{subc - Sub with Carry}

Description:

Subtract tow regsiters and the carrybit and write the result back to Rd.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd - Rs - C & SUB \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{mul - Multiply low word signed}

Description:

Multiply two registers and write the result back to Rd.

Registervalues are signed interpreted.

Result contains the low-word of the multiplication

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd x Rs & MUL \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{mulu - Multiply low word Unsigned}

Description:

Multiply two registers and write the result back to Rd.

Registervalues are unsigned interpreted.

Result contains the low-word of the multiplication

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd x Rs & MULU \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{mulh - Multiply High word signed}

Description:

Multiply two registers and write the result back to Rd.

Registervalues are signed interpreted.

Result contains the high-word of the multiplication.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd x Rs & MULH \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{mulhu - Multiply High word Unsigned}

Description:

Multiply two registers and write the result back to Rd.

Registervalues are unsigned interpreted.

Result contains the high-word of the multiplication

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd x Rs & MULHU \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{or - Logical Or}

Description:

Bitwise or combination of the two registers.

Result write back to Rd

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd $\vee $ Rs & OR \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{and - Logical And}

Description:

Bitwise and combination of the two registers.

Result write back to Rd.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd $\wedge $ Rs & AND\ \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{xor - Logical xor}

Description:

Bitwise xor combination of the two registers.

Result write back to Rd.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd $\oplus $ Rs & XOR \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{not - Invert }

Description:

Invert the bits of register Rd, and write the result back to Rd.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ not Rd & NOT \ \ Rd &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{neg - Negate}

Description:

Calculate the 2'es complement of Rd and write the result back to Rd.

Max value 0xFFFF left unchanged.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow \pm $ Rd & NEG \ \ Rd &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{asr - Aritmethic Shift Right}

Description:

Hold MSB and shift all bits in Rd one bit to the right

LSB is shifted out.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd(b15,b15,...,b1) $\leftarrow $ (b15,...,b0) & ASR \ \ Rd &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{lsl - Logical Shift Left}

Description:

Shift all bits in Rd to the left

MSB is shifted out, LSB is cleared.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd(b14,...,b0,0) $\leftarrow $ (b15,...,b0) & LSL\ \ \ Rd &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{lsr - Logical Shift Right}

Description:

Shift all bits in Rd to the right

MSB\ is cleared, LSB is shifted out.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd(0,b15,...,b1) $\leftarrow $ (b15,...,b0) & LSR \ \ Rd &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{lsli - Logical Shift Left Immediate}

Description:

Shift all bits about the given value to the left.

MSB is shifted out, LSB is cleared.

Immediate is 4 bits long and interpreted as unsigned.

Immediate can be in range 0 <= imm <16.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $(Rd \guillemotleft\ 0, um i stellen) & LSLI \ \ Rd, Imm &  & 
\\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{x} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{lsri - Logical Shift Right Immediate}

Description:

Shift all bits about the given value to the right.

MSB is cleared, LSB is shifted out.

Immediate 4 bits long and interpreted as unsigned.

Immediate value can be in range 0 <= imm <16.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ (0,um i stellen \guillemotright\ Rd) & LSRI \ \ Rd, Imm & 
&  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{x} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{scb - Set Clear Bit}

Description:

Immediate is 5 bits long and interpreted as unsigned.

Bit3 to bit0 of immediate gives the position which bit in Rd should be set
or cleared.

If bit4 in Imm is 1, bit in Rd is set.

If bit4 in Imm is 0, bit in Rd is cleared.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd(bx) $\leftarrow $ 1/0 &  & SCB \ \ Rd, Imm &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{pos} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{
i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & 
\multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{roti - Rotate right left Immediate}

Description:

Immediate is 5 bits long and interpreted as unsigned.

Bit3 to bit0 of immediate gives to length to rotate the bits in Rd.

If bit4 in Imm is 1 rotation direction is right.

if bit4 in Imm is 0 rotation direction is left

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
\begin{tabular}{l}
Rd(b14,...,b0,b15) $\leftarrow $ Rd(b15,...,b0) if dir =\ 0 \\ 
Rd(b0,b15,...,b1) $\leftarrow $ Rd(b15,...,b0) if dir =\ 1%
\end{tabular}
& ROTI \ \ Rd, Imm &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{dir} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{
i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & 
\multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{cmplt - Compare Less Than}

Description:

Test if Rd < Rs

If true write 1 to Rd otherwise 0.

Both registers are signed interpreted.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd \guilsinglleft\ Rs $\leftarrow $ (1/0) & CMPLT \ \ Rd, RS
&  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{cmpltu - Compare Less Than Unsigned}

Description:

Test if Rd < Rs

If true write 1 to Rd otherwise 0.

Both registers are unsigned interpreted.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd \guilsinglleft\ Rs $\leftarrow $ (1/0) & CMPLTU \ \ Rd,
Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{cmplte - Compare Less Than Equal}

Description:

Test if Rd <= Rs

If true write 1 to Rd otherwise 0.

Both registers are signed interpreted.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd $\leqq $ Rs $\leftarrow $ (1/0) & CMPLTE \ \ Rd, Rs &  & 
\\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{cmplteu - Compare Less Than Equal Unsigned}

Description:

Test if Rd <= Rs

If true write 1 to Rd otherwise 0.

Both registers are unsigned interpreted.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd $\leqq $ Rs $\leftarrow $ (1/0) & CMPLTEU \ \ Rd, Rs & 
&  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{cmpe - Compare Equal}

Description:

Test if Rd =\ Rs

If true write 1 to Rd, otherwise 0.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd $=$ Rs $\leftarrow $ (1/0) & CMP \ \ Rd, Rs &  &  \\ 
\hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{cmpei - Compare Equal Immediate}

Description:

Test if Rd =\ Imm

If true Write 1 to Rd, otherwise 0.

Register and immediate are signed interpreted

Immediate is 5 bits long

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rd =\ Imm $\leftarrow $ (1/0) & CMPEI \ \ Rd, Imm &  &  \\ 
\hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i}
& \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{i} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

\textbf{mov - Copy Registercontent}

Description:

Copy the content of Rs to Rd.

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Rs & MOV \ \ Rd, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

ld - Load

Description:

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Addr & LD \ \ Rd, Addr &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

ldb - Load Byte

Description:

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Rd $\leftarrow $ Addr (byte) & LDB \ \ Rd, Adrr &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d} & \multicolumn{1}{|l|}{d}
& \multicolumn{1}{|l|}{d} \\ \hline
\end{tabular}

\bigskip

st - Store

Description:

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Addr $\leftarrow $ Rs & ST \ \ Addr, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{0}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} \\ \hline
\end{tabular}

\bigskip

stb - Store Byte

Description:

\begin{tabular}{|l|l|l|l|}
\hline
Operation & Syntax & Operands & Program Counter \\ \hline
Addr $\leftarrow $ Rs (byte) & STB \ \ Addr, Rs &  &  \\ \hline
\end{tabular}

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{6}{|l|}{Opcode} & \multicolumn{5}{|l|}{} & \multicolumn{5}{|l|}{
} \\ \hline
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 \\ \hline
\multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1} & \multicolumn{1}{|l|}{1}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a}
& \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{a} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s} & \multicolumn{1}{|l|}{s}
& \multicolumn{1}{|l|}{s} \\ \hline
\end{tabular}

--->












[[Category:Computer Architecture]]
